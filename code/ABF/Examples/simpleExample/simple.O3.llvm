; ModuleID = 'simple.c'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.11.0"

@main.A = internal global [1001 x i64] zeroinitializer, align 16
@main.B = internal global [1001 x i64] zeroinitializer, align 16
@main.C = internal global [1001 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@.memset_pattern = internal unnamed_addr constant [2 x i64] [i64 20, i64 20], align 16

; Function Attrs: nounwind ssp uwtable
define i64 @sum(i64* nocapture readonly %A, i64* nocapture readonly %B, i64* nocapture %C, i64 %count) #0 {
  %1 = icmp sgt i64 %count, 0
  br i1 %1, label %.lr.ph5.split.us, label %._crit_edge

.lr.ph5.split.us:                                 ; preds = %0
  %2 = add i64 %count, -1
  %3 = zext i64 %2 to i65
  %4 = add i64 %count, -2
  %5 = zext i64 %4 to i65
  %6 = mul i65 %3, %5
  %7 = lshr i65 %6, 1
  %8 = trunc i65 %7 to i64
  %9 = add i64 %8, %count
  %10 = add i64 %9, -1
  br label %.loopexit.us

.loopexit.us:                                     ; preds = %.lr.ph5.split.us, %.loopexit.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %.loopexit.us ], [ 0, %.lr.ph5.split.us ]
  %sum.04.us = phi i64 [ %22, %.loopexit.us ], [ 0, %.lr.ph5.split.us ]
  %i.03.us = phi i64 [ %13, %.loopexit.us ], [ 0, %.lr.ph5.split.us ]
  %11 = getelementptr inbounds i64* %A, i64 %i.03.us
  %12 = load i64* %11, align 8, !tbaa !1
  %13 = add nsw i64 %i.03.us, 1
  %14 = getelementptr inbounds i64* %A, i64 %13
  %15 = load i64* %14, align 8, !tbaa !1
  %16 = getelementptr inbounds i64* %B, i64 %i.03.us
  %17 = load i64* %16, align 8, !tbaa !1
  %18 = add nsw i64 %17, %12
  %19 = getelementptr inbounds i64* %C, i64 %i.03.us
  store i64 %18, i64* %19, align 8, !tbaa !1
  %20 = mul i64 %15, %12
  %21 = add i64 %sum.04.us, %indvars.iv
  %22 = add i64 %21, %20
  %indvars.iv.next = add i64 %indvars.iv, %10
  %exitcond8 = icmp eq i64 %i.03.us, %2
  br i1 %exitcond8, label %._crit_edge.loopexit, label %.loopexit.us

._crit_edge.loopexit:                             ; preds = %.loopexit.us
  %.lcssa = phi i64 [ %22, %.loopexit.us ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %sum.0.lcssa = phi i64 [ 0, %0 ], [ %.lcssa, %._crit_edge.loopexit ]
  ret i64 %sum.0.lcssa
}

; Function Attrs: nounwind ssp uwtable
define i32 @main() #0 {
.loopexit.us.i.preheader:
  call void @memset_pattern16(i8* bitcast ([1001 x i64]* @main.A to i8*), i8* bitcast ([2 x i64]* @.memset_pattern to i8*), i64 8008) #2
  %.pre = load i64* getelementptr inbounds ([1001 x i64]* @main.A, i64 0, i64 0), align 16, !tbaa !1
  br label %.loopexit.us.i

.loopexit.us.i:                                   ; preds = %.loopexit.us.i, %.loopexit.us.i.preheader
  %0 = phi i64 [ %.pre, %.loopexit.us.i.preheader ], [ %13, %.loopexit.us.i ]
  %indvars.iv.i = phi i64 [ 0, %.loopexit.us.i.preheader ], [ %indvars.iv.next.i.1, %.loopexit.us.i ]
  %sum.04.us.i = phi i64 [ 0, %.loopexit.us.i.preheader ], [ %20, %.loopexit.us.i ]
  %i.03.us.i = phi i64 [ 0, %.loopexit.us.i.preheader ], [ %11, %.loopexit.us.i ]
  %1 = add nsw i64 %i.03.us.i, 1
  %2 = getelementptr inbounds [1001 x i64]* @main.A, i64 0, i64 %1
  %3 = load i64* %2, align 8, !tbaa !1
  %4 = getelementptr inbounds [1001 x i64]* @main.B, i64 0, i64 %i.03.us.i
  %5 = load i64* %4, align 8, !tbaa !1
  %6 = add nsw i64 %5, %0
  %7 = getelementptr inbounds [1001 x i64]* @main.C, i64 0, i64 %i.03.us.i
  store i64 %6, i64* %7, align 8, !tbaa !1
  %8 = mul i64 %3, %0
  %9 = add i64 %sum.04.us.i, %indvars.iv.i
  %10 = add i64 %9, %8
  %indvars.iv.next.i = add i64 %indvars.iv.i, 499500
  %11 = add nsw i64 %1, 1
  %12 = getelementptr inbounds [1001 x i64]* @main.A, i64 0, i64 %11
  %13 = load i64* %12, align 8, !tbaa !1
  %14 = getelementptr inbounds [1001 x i64]* @main.B, i64 0, i64 %1
  %15 = load volatile i64* %14, align 8, !tbaa !1
  %16 = add nsw i64 %15, %3
  %17 = getelementptr inbounds [1001 x i64]* @main.C, i64 0, i64 %1
  store i64 %16, i64* %17, align 8, !tbaa !1
  %18 = mul i64 %13, %3
  %19 = add i64 %10, %indvars.iv.next.i
  %20 = add i64 %19, %18
  %indvars.iv.next.i.1 = add i64 %indvars.iv.next.i, 499500
  %exitcond8.i.1 = icmp eq i64 %1, 999
  br i1 %exitcond8.i.1, label %sum.exit, label %.loopexit.us.i

sum.exit:                                         ; preds = %.loopexit.us.i
  %.lcssa = phi i64 [ %20, %.loopexit.us.i ]
  %21 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str, i64 0, i64 0), i64 %.lcssa) #2
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #1

declare void @memset_pattern16(i8*, i8*, i64)

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5.2 (tags/RELEASE_352/final)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"long", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
