        -:    0:Source:blackscholes.c
        -:    0:Graph:blackscholes.gcno
        -:    0:Data:blackscholes.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// Copyright (c) 2007 Intel Corp.
        -:    2:
        -:    3:// Black-Scholes
        -:    4:// Analytical method for calculating European Options
        -:    5://
        -:    6:// 
        -:    7:// Reference Source: Options, Futures, and Other Derivatives, 3rd Edition, Prentice 
        -:    8:// Hall, John C. Hull,
        -:    9:
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <math.h>
        -:   13:#include <string.h>
        -:   14:
        -:   15:#ifdef ENABLE_PARSEC_HOOKS
        -:   16:#include <hooks.h>
        -:   17:#endif
        -:   18:
        -:   19:// Multi-threaded pthreads header
        -:   20:#ifdef ENABLE_THREADS
        -:   21:// Add the following line so that icc 9.0 is compatible with pthread lib.
        -:   22:#define __thread __threadp
        -:   23:MAIN_ENV
        -:   24:#undef __thread
        -:   25:#endif
        -:   26:
        -:   27:// Multi-threaded OpenMP header
        -:   28:#ifdef ENABLE_OPENMP
        -:   29:#include <omp.h>
        -:   30:#endif
        -:   31:
        -:   32:#ifdef ENABLE_TBB
        -:   33:#include "tbb/blocked_range.h"
        -:   34:#include "tbb/parallel_for.h"
        -:   35:#include "tbb/task_scheduler_init.h"
        -:   36:#include "tbb/tick_count.h"
        -:   37:
        -:   38:using namespace std;
        -:   39:using namespace tbb;
        -:   40:#endif //ENABLE_TBB
        -:   41:
        -:   42:// Multi-threaded header for Windows
        -:   43:#ifdef WIN32
        -:   44:#pragma warning(disable : 4305)
        -:   45:#pragma warning(disable : 4244)
        -:   46:#include <windows.h>
        -:   47:#endif
        -:   48:
        -:   49://Precision to use for calculations
        -:   50:#define fptype float
        -:   51:
        -:   52:#define NUM_RUNS 100
        -:   53:
        -:   54:typedef struct OptionData_ {
        -:   55:        fptype s;          // spot price
        -:   56:        fptype strike;     // strike price
        -:   57:        fptype r;          // risk-free interest rate
        -:   58:        fptype divq;       // dividend rate
        -:   59:        fptype v;          // volatility
        -:   60:        fptype t;          // time to maturity or option expiration in years 
        -:   61:                           //     (1yr = 1.0, 6mos = 0.5, 3mos = 0.25, ..., etc)  
        -:   62:        char OptionType;   // Option type.  "P"=PUT, "C"=CALL
        -:   63:        fptype divs;       // dividend vals (not used in this test)
        -:   64:        fptype DGrefval;   // DerivaGem Reference Value
        -:   65:} OptionData;
        -:   66:
        -:   67:OptionData *data;
        -:   68:fptype *prices;
        -:   69:int numOptions;
        -:   70:
        -:   71:int    * otype;
        -:   72:fptype * sptprice;
        -:   73:fptype * strike;
        -:   74:fptype * rate;
        -:   75:fptype * volatility;
        -:   76:fptype * otime;
        -:   77:int numError = 0;
        -:   78:int nThreads;
        -:   79:
        -:   80:////////////////////////////////////////////////////////////////////////////////
        -:   81:////////////////////////////////////////////////////////////////////////////////
        -:   82:///////////////////////////////////////////////////////////////////////////////
        -:   83:////////////////////////////////////////////////////////////////////////////////
        -:   84:// Cumulative Normal Distribution Function
        -:   85:// See Hull, Section 11.8, P.243-244
        -:   86:#define inv_sqrt_2xPI 0.39894228040143270286
        -:   87:
function CNDF called 6400 returned 100% blocks executed 100%
        -:   88:fptype CNDF ( fptype InputX ) 
        -:   89:{
        -:   90:    int sign;
        -:   91:
        -:   92:    fptype OutputX;
        -:   93:    fptype xInput;
        -:   94:    fptype xNPrimeofX;
        -:   95:    fptype expValues;
        -:   96:    fptype xK2;
        -:   97:    fptype xK2_2, xK2_3;
        -:   98:    fptype xK2_4, xK2_5;
        -:   99:    fptype xLocal, xLocal_1;
        -:  100:    fptype xLocal_2, xLocal_3;
        -:  101:
        -:  102:    // Check for negative value of InputX
     6400:  103:    if (InputX < 0.0) {
branch  0 taken 22%
branch  1 taken 78%
     1400:  104:        InputX = -InputX;
     1400:  105:        sign = 1;
     1400:  106:    } else 
     5000:  107:        sign = 0;
        -:  108:
     6400:  109:    xInput = InputX;
        -:  110: 
        -:  111:    // Compute NPrimeX term common to both four & six decimal accuracy calcs
     6400:  112:    expValues = exp(-0.5f * InputX * InputX);
     6400:  113:    xNPrimeofX = expValues;
     6400:  114:    xNPrimeofX = xNPrimeofX * inv_sqrt_2xPI;
        -:  115:
     6400:  116:    xK2 = 0.2316419 * xInput;
     6400:  117:    xK2 = 1.0 + xK2;
     6400:  118:    xK2 = 1.0 / xK2;
     6400:  119:    xK2_2 = xK2 * xK2;
     6400:  120:    xK2_3 = xK2_2 * xK2;
     6400:  121:    xK2_4 = xK2_3 * xK2;
     6400:  122:    xK2_5 = xK2_4 * xK2;
        -:  123:    
     6400:  124:    xLocal_1 = xK2 * 0.319381530;
     6400:  125:    xLocal_2 = xK2_2 * (-0.356563782);
     6400:  126:    xLocal_3 = xK2_3 * 1.781477937;
     6400:  127:    xLocal_2 = xLocal_2 + xLocal_3;
     6400:  128:    xLocal_3 = xK2_4 * (-1.821255978);
     6400:  129:    xLocal_2 = xLocal_2 + xLocal_3;
     6400:  130:    xLocal_3 = xK2_5 * 1.330274429;
     6400:  131:    xLocal_2 = xLocal_2 + xLocal_3;
        -:  132:
     6400:  133:    xLocal_1 = xLocal_2 + xLocal_1;
     6400:  134:    xLocal   = xLocal_1 * xNPrimeofX;
     6400:  135:    xLocal   = 1.0 - xLocal;
        -:  136:
     6400:  137:    OutputX  = xLocal;
        -:  138:    
     6400:  139:    if (sign) {
branch  0 taken 22%
branch  1 taken 78%
     1400:  140:        OutputX = 1.0 - OutputX;
     1400:  141:    }
        -:  142:    
     6400:  143:    return OutputX;
        -:  144:} 
        -:  145:
        -:  146://////////////////////////////////////////////////////////////////////////////////////
        -:  147://////////////////////////////////////////////////////////////////////////////////////
        -:  148://////////////////////////////////////////////////////////////////////////////////////
        -:  149://////////////////////////////////////////////////////////////////////////////////////
function BlkSchlsEqEuroNoDiv called 3200 returned 100% blocks executed 100%
        -:  150:fptype BlkSchlsEqEuroNoDiv( fptype sptprice,
        -:  151:                            fptype strike, fptype rate, fptype volatility,
        -:  152:                            fptype time, int otype, float timet )
        -:  153:{
        -:  154:    fptype OptionPrice;
        -:  155:
        -:  156:    // local private working variables for the calculation
        -:  157:    fptype xStockPrice;
        -:  158:    fptype xStrikePrice;
        -:  159:    fptype xRiskFreeRate;
        -:  160:    fptype xVolatility;
        -:  161:    fptype xTime;
        -:  162:    fptype xSqrtTime;
        -:  163:
        -:  164:    fptype logValues;
        -:  165:    fptype xLogTerm;
        -:  166:    fptype xD1; 
        -:  167:    fptype xD2;
        -:  168:    fptype xPowerTerm;
        -:  169:    fptype xDen;
        -:  170:    fptype d1;
        -:  171:    fptype d2;
        -:  172:    fptype FutureValueX;
        -:  173:    fptype NofXd1;
        -:  174:    fptype NofXd2;
        -:  175:    fptype NegNofXd1;
        -:  176:    fptype NegNofXd2;    
        -:  177:    
     3200:  178:    xStockPrice = sptprice;
     3200:  179:    xStrikePrice = strike;
     3200:  180:    xRiskFreeRate = rate;
     3200:  181:    xVolatility = volatility;
        -:  182:
     3200:  183:    xTime = time;
     3200:  184:    xSqrtTime = sqrt(xTime);
        -:  185:
     3200:  186:    logValues = log( sptprice / strike );
        -:  187:        
     3200:  188:    xLogTerm = logValues;
        -:  189:        
        -:  190:    
     3200:  191:    xPowerTerm = xVolatility * xVolatility;
     3200:  192:    xPowerTerm = xPowerTerm * 0.5;
        -:  193:        
     3200:  194:    xD1 = xRiskFreeRate + xPowerTerm;
     3200:  195:    xD1 = xD1 * xTime;
     3200:  196:    xD1 = xD1 + xLogTerm;
        -:  197:
     3200:  198:    xDen = xVolatility * xSqrtTime;
     3200:  199:    xD1 = xD1 / xDen;
     3200:  200:    xD2 = xD1 -  xDen;
        -:  201:
     3200:  202:    d1 = xD1;
     3200:  203:    d2 = xD2;
        -:  204:    
     3200:  205:    NofXd1 = CNDF( d1 );
     3200:  206:    NofXd2 = CNDF( d2 );
        -:  207:
     3200:  208:    FutureValueX = strike * ( exp( -(rate)*(time) ) );        
     3200:  209:    if (otype == 0) { // "C"           
branch  0 taken 88%
branch  1 taken 13%
     2800:  210:        OptionPrice = (sptprice * NofXd1) - (FutureValueX * NofXd2);
     2800:  211:    } else { 
      400:  212:        NegNofXd1 = (1.0 - NofXd1);
      400:  213:        NegNofXd2 = (1.0 - NofXd2);
      400:  214:        OptionPrice = (FutureValueX * NegNofXd2) - (sptprice * NegNofXd1);
        -:  215:    }
        -:  216:    
     3200:  217:    return OptionPrice;
        -:  218:}
        -:  219:
        -:  220:#ifdef ENABLE_TBB
        -:  221:struct mainWork {
        -:  222:  mainWork() {}
        -:  223:  mainWork(mainWork &w, tbb::split) {}
        -:  224:
        -:  225:  void operator()(const tbb::blocked_range<int> &range) const {
        -:  226:    fptype price;
        -:  227:    int begin = range.begin();
        -:  228:    int end = range.end();
        -:  229:
        -:  230:    for (int i=begin; i!=end; i++) {
        -:  231:      /* Calling main function to calculate option value based on 
        -:  232:       * Black & Scholes's equation.
        -:  233:       */
        -:  234:
        -:  235:      price = BlkSchlsEqEuroNoDiv( sptprice[i], strike[i],
        -:  236:                                   rate[i], volatility[i], otime[i], 
        -:  237:                                   otype[i], 0);
        -:  238:      prices[i] = price;
        -:  239:
        -:  240:#ifdef ERR_CHK 
        -:  241:      fptype priceDelta = data[i].DGrefval - price;
        -:  242:      if( fabs(priceDelta) >= 1e-5 ){
        -:  243:        fprintf(stderr,"Error on %d. Computed=%.5f, Ref=%.5f, Delta=%.5f\n",
        -:  244:               i, price, data[i].DGrefval, priceDelta);
        -:  245:        numError ++;
        -:  246:      }
        -:  247:#endif
        -:  248:    }
        -:  249:  }
        -:  250:};
        -:  251:
        -:  252:#endif // ENABLE_TBB
        -:  253:
        -:  254://////////////////////////////////////////////////////////////////////////////////////
        -:  255://////////////////////////////////////////////////////////////////////////////////////
        -:  256://////////////////////////////////////////////////////////////////////////////////////
        -:  257://////////////////////////////////////////////////////////////////////////////////////
        -:  258:
        -:  259:#ifdef ENABLE_TBB
        -:  260:int bs_thread(void *tid_ptr) {
        -:  261:    int j;
        -:  262:    tbb::affinity_partitioner a;
        -:  263:
        -:  264:    mainWork doall;
        -:  265:    for (j=0; j<NUM_RUNS; j++) {
        -:  266:      tbb::parallel_for(tbb::blocked_range<int>(0, numOptions), doall, a);
        -:  267:    }
        -:  268:
        -:  269:    return 0;
        -:  270:}
        -:  271:#else // !ENABLE_TBB
        -:  272:
        -:  273:#ifdef WIN32
        -:  274:DWORD WINAPI bs_thread(LPVOID tid_ptr){
        -:  275:#else
function bs_thread called 2 returned 100% blocks executed 100%
        -:  276:int bs_thread(void *tid_ptr) {
        -:  277:#endif
        -:  278:    int i, j;
        -:  279:    fptype price;
        -:  280:    fptype priceDelta;
        2:  281:    int tid = *(int *)tid_ptr;
        2:  282:    int start = tid * (numOptions / nThreads);
        2:  283:    int end = start + (numOptions / nThreads);
        -:  284:
      404:  285:    for (j=0; j<NUM_RUNS; j++) {
branch  0 taken 99%
branch  1 taken 1%
        -:  286:#ifdef ENABLE_OPENMP
        -:  287:#pragma omp parallel for private(i, price, priceDelta)
        -:  288:        for (i=0; i<numOptions; i++) {
        -:  289:#else  //ENABLE_OPENMP
     6800:  290:        for (i=start; i<end; i++) {
branch  0 taken 94%
branch  1 taken 6%
        -:  291:#endif //ENABLE_OPENMP
        -:  292:            /* Calling main function to calculate option value based on 
        -:  293:             * Black & Scholes's equation.
        -:  294:             */
     3200:  295:            price = BlkSchlsEqEuroNoDiv( sptprice[i], strike[i],
        -:  296:                                         rate[i], volatility[i], otime[i], 
        -:  297:                                         otype[i], 0);
     3200:  298:            prices[i] = price;
        -:  299:
        -:  300:#ifdef ERR_CHK
        -:  301:            priceDelta = data[i].DGrefval - price;
        -:  302:            if( fabs(priceDelta) >= 1e-4 ){
        -:  303:                printf("Error on %d. Computed=%.5f, Ref=%.5f, Delta=%.5f\n",
        -:  304:                       i, price, data[i].DGrefval, priceDelta);
        -:  305:                numError ++;
        -:  306:            }
        -:  307:#endif
     3200:  308:        }
      200:  309:    }
        -:  310:
        2:  311:    return 0;
        -:  312:}
        -:  313:#endif //ENABLE_TBB
        -:  314:
function main called 2 returned 100% blocks executed 69%
        -:  315:int main (int argc, char **argv)
        -:  316:{
        -:  317:    FILE *file;
        -:  318:    int i;
        -:  319:    int loopnum;
        -:  320:    fptype * buffer;
        -:  321:    int * buffer2;
        -:  322:    int rv;
        -:  323:
        -:  324:#ifdef PARSEC_VERSION
        -:  325:#define __PARSEC_STRING(x) #x
        -:  326:#define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
        -:  327:        printf("PARSEC Benchmark Suite Version "__PARSEC_XSTRING(PARSEC_VERSION)"\n");
        -:  328:	fflush(NULL);
        -:  329:#else
        2:  330:        printf("PARSEC Benchmark Suite\n");
        2:  331:	fflush(NULL);
        -:  332:#endif //PARSEC_VERSION
        -:  333:#ifdef ENABLE_PARSEC_HOOKS
        -:  334:   __parsec_bench_begin(__parsec_blackscholes);
        -:  335:#endif
        -:  336:
        2:  337:   if (argc != 4)
branch  0 taken 0%
branch  1 taken 100%
        -:  338:        {
    #####:  339:                printf("Usage:\n\t%s <nthreads> <inputFile> <outputFile>\n", argv[0]);
    #####:  340:                exit(1);
        -:  341:        }
        2:  342:    nThreads = atoi(argv[1]);
        2:  343:    char *inputFile = argv[2];
        2:  344:    char *outputFile = argv[3];
        -:  345:
        -:  346:    //Read input data from file
        2:  347:    file = fopen(inputFile, "r");
        2:  348:    if(file == NULL) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  349:      printf("ERROR: Unable to open file `%s'.\n", inputFile);
    #####:  350:      exit(1);
        -:  351:    }
        2:  352:    rv = fscanf(file, "%i", &numOptions);
        2:  353:    if(rv != 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  354:      printf("ERROR: Unable to read from file `%s'.\n", inputFile);
    #####:  355:      fclose(file);
    #####:  356:      exit(1);
        -:  357:    }
        2:  358:    if(nThreads > numOptions) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  359:      printf("WARNING: Not enough work, reducing number of threads to match number of options.\n");
    #####:  360:      nThreads = numOptions;
    #####:  361:    }
        -:  362:
        -:  363:#if !defined(ENABLE_THREADS) && !defined(ENABLE_OPENMP) && !defined(ENABLE_TBB)
        2:  364:    if(nThreads != 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  365:        printf("Error: <nthreads> must be 1 (serial version)\n");
    #####:  366:        exit(1);
        -:  367:    }
        -:  368:#endif
        -:  369:
        -:  370:    // alloc spaces for the option data
        2:  371:    data = (OptionData*)malloc(numOptions*sizeof(OptionData));
        2:  372:    prices = (fptype*)malloc(numOptions*sizeof(fptype));
       68:  373:    for ( loopnum = 0; loopnum < numOptions; ++ loopnum )
branch  0 taken 94%
branch  1 taken 6%
        -:  374:    {
       32:  375:        rv = fscanf(file, "%f %f %f %f %f %f %c %f %f", &data[loopnum].s, &data[loopnum].strike, &data[loopnum].r, &data[loopnum].divq, &data[loopnum].v, &data[loopnum].t, &data[loopnum].OptionType, &data[loopnum].divs, &data[loopnum].DGrefval);
       32:  376:        if(rv != 9) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  377:          printf("ERROR: Unable to read from file `%s'.\n", inputFile);
    #####:  378:          fclose(file);
    #####:  379:          exit(1);
        -:  380:        }
       32:  381:    }
        2:  382:    rv = fclose(file);
        2:  383:    if(rv != 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  384:      printf("ERROR: Unable to close file `%s'.\n", inputFile);
    #####:  385:      exit(1);
        -:  386:    }
        -:  387:
        -:  388:#ifdef ENABLE_THREADS
        -:  389:    MAIN_INITENV(,8000000,nThreads);
        -:  390:#endif
        2:  391:    printf("Num of Options: %d\n", numOptions);
        2:  392:    printf("Num of Runs: %d\n", NUM_RUNS);
        -:  393:
        -:  394:#define PAD 256
        -:  395:#define LINESIZE 64
        -:  396:
        2:  397:    buffer = (fptype *) malloc(5 * numOptions * sizeof(fptype) + PAD);
        2:  398:    sptprice = (fptype *) (((unsigned long long)buffer + PAD) & ~(LINESIZE - 1));
        2:  399:    strike = sptprice + numOptions;
        2:  400:    rate = strike + numOptions;
        2:  401:    volatility = rate + numOptions;
        2:  402:    otime = volatility + numOptions;
        -:  403:
        2:  404:    buffer2 = (int *) malloc(numOptions * sizeof(fptype) + PAD);
        2:  405:    otype = (int *) (((unsigned long long)buffer2 + PAD) & ~(LINESIZE - 1));
        -:  406:
       68:  407:    for (i=0; i<numOptions; i++) {
branch  0 taken 94%
branch  1 taken 6%
       32:  408:        otype[i]      = (data[i].OptionType == 'P') ? 1 : 0;
       32:  409:        sptprice[i]   = data[i].s;
       32:  410:        strike[i]     = data[i].strike;
       32:  411:        rate[i]       = data[i].r;
       32:  412:        volatility[i] = data[i].v;    
       32:  413:        otime[i]      = data[i].t;
       32:  414:    }
        -:  415:
        2:  416:    printf("Size of data: %lu\n", numOptions * (sizeof(OptionData) + sizeof(int)));
        -:  417:
        -:  418:#ifdef ENABLE_PARSEC_HOOKS
        -:  419:    __parsec_roi_begin();
        -:  420:#endif
        -:  421:
        -:  422:#ifdef ENABLE_THREADS
        -:  423:#ifdef WIN32
        -:  424:    HANDLE *threads;
        -:  425:    int *nums;
        -:  426:    threads = (HANDLE *) malloc (nThreads * sizeof(HANDLE));
        -:  427:    nums = (int *) malloc (nThreads * sizeof(int));
        -:  428:
        -:  429:    for(i=0; i<nThreads; i++) {
        -:  430:        nums[i] = i;
        -:  431:        threads[i] = CreateThread(0, 0, bs_thread, &nums[i], 0, 0);
        -:  432:    }
        -:  433:    WaitForMultipleObjects(nThreads, threads, TRUE, INFINITE);
        -:  434:    free(threads);
        -:  435:    free(nums);
        -:  436:#else
        -:  437:    int *tids;
        -:  438:    tids = (int *) malloc (nThreads * sizeof(int));
        -:  439:
        -:  440:    for(i=0; i<nThreads; i++) {
        -:  441:        tids[i]=i;
        -:  442:        CREATE_WITH_ARG(bs_thread, &tids[i]);
        -:  443:    }
        -:  444:    WAIT_FOR_END(nThreads);
        -:  445:    free(tids);
        -:  446:#endif //WIN32
        -:  447:#else //ENABLE_THREADS
        -:  448:#ifdef ENABLE_OPENMP
        -:  449:    {
        -:  450:        int tid=0;
        -:  451:        omp_set_num_threads(nThreads);
        -:  452:        bs_thread(&tid);
        -:  453:    }
        -:  454:#else //ENABLE_OPENMP
        -:  455:#ifdef ENABLE_TBB
        -:  456:    tbb::task_scheduler_init init(nThreads);
        -:  457:
        -:  458:    int tid=0;
        -:  459:    bs_thread(&tid);
        -:  460:#else //ENABLE_TBB
        -:  461:    //serial version
        2:  462:    int tid=0;
        2:  463:    bs_thread(&tid);
        -:  464:#endif //ENABLE_TBB
        -:  465:#endif //ENABLE_OPENMP
        -:  466:#endif //ENABLE_THREADS
        -:  467:
        -:  468:#ifdef ENABLE_PARSEC_HOOKS
        -:  469:    __parsec_roi_end();
        -:  470:#endif
        -:  471:
        -:  472:    //Write prices to output file
        2:  473:    file = fopen(outputFile, "w");
        2:  474:    if(file == NULL) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  475:      printf("ERROR: Unable to open file `%s'.\n", outputFile);
    #####:  476:      exit(1);
        -:  477:    }
        2:  478:    rv = fprintf(file, "%i\n", numOptions);
        2:  479:    if(rv < 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  480:      printf("ERROR: Unable to write to file `%s'.\n", outputFile);
    #####:  481:      fclose(file);
    #####:  482:      exit(1);
        -:  483:    }
       68:  484:    for(i=0; i<numOptions; i++) {
branch  0 taken 94%
branch  1 taken 6%
       32:  485:      rv = fprintf(file, "%.18f\n", prices[i]);
       32:  486:      if(rv < 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  487:        printf("ERROR: Unable to write to file `%s'.\n", outputFile);
    #####:  488:        fclose(file);
    #####:  489:        exit(1);
        -:  490:      }
       32:  491:    }
        2:  492:    rv = fclose(file);
        2:  493:    if(rv != 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  494:      printf("ERROR: Unable to close file `%s'.\n", outputFile);
    #####:  495:      exit(1);
        -:  496:    }
        -:  497:
        -:  498:#ifdef ERR_CHK
        -:  499:    printf("Num Errors: %d\n", numError);
        -:  500:#endif
        2:  501:    free(data);
        2:  502:    free(prices);
        -:  503:
        -:  504:#ifdef ENABLE_PARSEC_HOOKS
        -:  505:    __parsec_bench_end();
        -:  506:#endif
        -:  507:
        2:  508:    return 0;
        -:  509:}
        -:  510:
